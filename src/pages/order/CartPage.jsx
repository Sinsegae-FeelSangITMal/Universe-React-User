import { useEffect, useState } from "react";
import { getCart, updateCart, delCart } from "../../utils/CartApi";

export default function CartPage() {
    const [cartItems, setCartItems] = useState([
        { id: 1, company: "SM Entertainment", name: "The 1st Mini Album", price: 13300, qty: 1, img: "assets/img/elements/a.jpg", checked: false },
        { id: 2, company: "SM Entertainment", name: "The 1st Mini Album", price: 13300, qty: 1, img: "assets/img/elements/a.jpg", checked: false },
        { id: 3, company: "JYP Entertainment", name: "The 2nd Mini Album", price: 15000, qty: 1, img: "assets/img/elements/a.jpg", checked: false },
    ]);

    const userId = 1;

    useEffect(() => {
        load()
    }, []);

    const load = async () => {
        const cartList = await getCart(userId);
        const apiItems = cartList.data.data;

        // API Îç∞Ïù¥ÌÑ∞Î•º ÌîÑÎ°†Ìä∏ÏóêÏÑú Ïì∞Í∏∞ Ï¢ãÏùÄ Íµ¨Ï°∞Î°ú Î≥ÄÌôò
        const converted = apiItems.map(item => ({
            id: item.id,
            company: item.product.partnerName, // ÏÜåÏÜçÏÇ¨
            name: item.product.name,           // ÏÉÅÌíàÎ™Ö
            price: item.product.price,         // Í∞ÄÍ≤©
            qty: item.qty,                     // ÏàòÎüâ
            img: "assets/img/elements/a.jpg",  // ÏÑúÎ≤ÑÏóê Ïù¥ÎØ∏ÏßÄ ÏóÜÏúºÎ©¥ Í∏∞Î≥∏ Ïù¥ÎØ∏ÏßÄ
            checked: false
        }));

        setCartItems(converted);
    };

    // Ï†ÑÏ≤¥ ÏÑ†ÌÉù Ïó¨Î∂Ä
    const allChecked = cartItems.every(item => item.checked);

    // Ï†ÑÏ≤¥ ÏÑ†ÌÉù ÌÜ†Í∏Ä
    const handleAllCheck = (checked) => {
        setCartItems(cartItems.map(item => ({ ...item, checked })));
    };

    // Í∞úÎ≥Ñ ÏÑ†ÌÉù ÌÜ†Í∏Ä
    const handleCheck = (id, checked) => {
        setCartItems(cartItems.map(item => item.id === id ? { ...item, checked } : item));
    };

    // Í∞úÎ≥Ñ ÏÇ≠Ï†ú
    const handleDelete = async (id) => {
        try {
            await delCart(id);   // ÏÑúÎ≤Ñ Î∞òÏòÅ
            setCartItems(cartItems.filter(item => item.id !== id));
        } catch (err) {
            console.error("ÏÇ≠Ï†ú Ïã§Ìå®:", err);
        }
    };

    // ÏÑ†ÌÉù ÏÇ≠Ï†ú
    const handleDeleteSelected = async () => {
        const selectedIds = cartItems.filter(item => item.checked).map(item => item.id);
        try {
            await Promise.all(selectedIds.map(id => delCart(id))); // ÏÑúÎ≤Ñ Ìò∏Ï∂ú Î≥ëÎ†¨ Ï≤òÎ¶¨
            setCartItems(cartItems.filter(item => !item.checked));
        } catch (err) {
            console.error("ÏÑ†ÌÉù ÏÇ≠Ï†ú Ïã§Ìå®:", err);
        }
    };

    // ÏàòÎüâ Î≥ÄÍ≤Ω
    const handleQtyChange = async (id, qty) => {
        try {
            await updateCart(id, qty);      // ÏÑúÎ≤ÑÏóê Ï†ÑÏÜ°
            setCartItems(cartItems.map(item => 
                item.id === id ? { ...item, qty } : item
            ));
        } catch (err) {
            console.error("ÏàòÎüâ ÏàòÏ†ï Ïã§Ìå®: ", err);
        }
    };

    // Ï≤¥ÌÅ¨Îêú Ìï≠Î™©Îßå Ìï©Í≥Ñ (ÏàòÎüâ Ï†ÅÏö©)
    const totalPrice = cartItems
        .filter(item => item.checked) 
        .reduce((sum, item) => {
            const price = item.product ? item.product.price : item.price; // Î≥ÄÌôò Ïó¨Î∂Ä ÎåÄÏùë
            return sum + price * item.qty;   // üîë ÏàòÎüâ Î∞òÏòÅ
    }, 0);

    // ÏÜåÏÜçÏÇ¨Î≥Ñ Í∑∏Î£πÌïë
    const groupedItems = cartItems.reduce((acc, item) => {
        if (!acc[item.company]) acc[item.company] = [];
        acc[item.company].push(item);
        return acc;
    }, {});

    return (
        <main className="custom-background">
            <div className="container">
                <div className="section-top-border">
                    <div className="row">
                        <div className="col-lg-12 col-md-12">
                            <form action="#">
                                <h2 className="mb-40" style={{ fontWeight: 700 }}>Ïû•Î∞îÍµ¨Îãà</h2>

                                {/* Ï†ÑÏ≤¥ ÏÑ†ÌÉù + ÏÑ†ÌÉù ÏÇ≠Ï†ú */}
                                <div className="cart-custom two">
                                    <div style={{ display: "flex", alignItems: "center" }}>
                                        <div className="primary-checkbox cart">
                                            <input
                                                type="checkbox"
                                                id="check-all"
                                                checked={allChecked}
                                                onChange={(e) => handleAllCheck(e.target.checked)}
                                            />
                                            <label htmlFor="check-all" />
                                        </div>
                                        <span style={{ marginLeft: "8px" }}>Ï†ÑÏ≤¥ ÏÑ†ÌÉù</span>
                                    </div>

                                    <button
                                        type="button"
                                        className="genric-btn primary radius card select"
                                        onClick={handleDeleteSelected}
                                    >
                                        ÏÑ†ÌÉù ÏÇ≠Ï†ú
                                    </button>
                                </div>

                                {/* Ïû•Î∞îÍµ¨ÎãàÏóê Ìï≠Î™©Ïù¥ ÏûàÎäîÏßÄ Íµ¨Î∂Ñ ÌõÑ ÏóÜÏúºÎ©¥ Î¨∏Íµ¨ Ï∂úÎ†• */}
                                {/* ÏûàÏúºÎ©¥ ÏÜåÏÜçÏÇ¨Î≥ÑÎ°ú Í∑∏Î£πÌïëÌï¥ÏÑú Ï∂úÎ†• */}
                                {cartItems.length === 0 ? (
                                    <div className="custom-box" style={{ textAlign: "center", padding: "50px 0" }}>
                                        <p style={{ fontWeight: 600, fontSize: "18px", margin: 0 }}>
                                            Ïû•Î∞îÍµ¨ÎãàÏóê Ìï≠Î™©Ïù¥ ÏóÜÏäµÎãàÎã§
                                        </p>
                                    </div>
                                ) : 
                                (
                                    Object.entries(groupedItems).map(([company, items]) => (
                                        <div key={company} className="custom-box">
                                            <h3 className="mb-30">{company}</h3>
                                            <hr />

                                            {items.map(item => (
                                                <div key={item.id} className="cart-custom ckbox">
                                                    {/* Í∞úÎ≥Ñ Ï≤¥ÌÅ¨Î∞ïÏä§ */}
                                                    <div className="primary-checkbox cart">
                                                        <input
                                                            type="checkbox"
                                                            id={`check-item-${item.id}`}
                                                            checked={item.checked}
                                                            onChange={(e) => handleCheck(item.id, e.target.checked)}
                                                        />
                                                        <label htmlFor={`check-item-${item.id}`} />
                                                    </div>

                                                    {/* Ïù¥ÎØ∏ÏßÄ */}
                                                    <img src={item.img} className="cart-custom pdimg" />

                                                    {/* ÏÉÅÌíà Ï†ïÎ≥¥ */}
                                                    <div style={{ flex: 1 }}>
                                                        <p style={{ margin: 0, fontWeight: 600 }}>{item.name}</p>
                                                        <p style={{ margin: "5px 0" }}>ÌîÑÎ°úÎ™®ÏÖò Ï¶ùÏ†ïÌíà: ÎûúÎç§ Ìè¨ÌÜ†Ïπ¥Îìú 1Ï¢Ö</p>

                                                        {/* ÏàòÎüâ ÏÑ†ÌÉù */}
                                                        <select
                                                            className="form-select order"
                                                            value={item.qty}
                                                            onChange={(e) => handleQtyChange(item.id, parseInt(e.target.value, 10))}
                                                        >
                                                            {[1, 2, 3, 4, 5].map(n => (
                                                                <option key={n} value={n}>{n}Í∞ú</option>
                                                            ))}
                                                        </select>
                                                    </div>

                                                    {/* Í∞ÄÍ≤© + ÏÇ≠Ï†ú */}
                                                    <div className="cart-custom one">
                                                        <p style={{ margin: 0, fontWeight: 600, whiteSpace: "nowrap" }}>
                                                            KRW {item.price.toLocaleString()}
                                                        </p>
                                                        <button
                                                            type="button"
                                                            className="genric-btn primary-border small radius card delete"
                                                            onClick={() => handleDelete(item.id)}
                                                        >
                                                            X
                                                        </button>
                                                    </div>
                                                </div>
                                            ))}
                                        </div>
                                    ))
                                )}

                                {/* Ìï©Í≥Ñ ÏòÅÏó≠ */}
                                {cartItems.length > 0 && (
                                    <div className="cart-footer-bar">
                                        <span>
                                            ÏÉÅÌíà Í∏àÏï° KRW {totalPrice.toLocaleString()} + Î∞∞ÏÜ°ÎπÑ Î≥ÑÎèÑ = Ï¥ù ÏòàÏÉÅ Í∏àÏï° (
                                            {cartItems.filter(i => i.checked).reduce((sum, item) => sum + item.qty, 0)}Í∞ú)
                                        </span>
                                        <button type="button" className="genric-btn primary radius pay">
                                            {cartItems.filter(i => i.checked).reduce((sum, item) => sum + item.qty, 0)}Í∞ú ÏÉÅÌíà Ï£ºÎ¨∏ÌïòÍ∏∞
                                        </button>
                                    </div>
                                )}
                                
                            </form>

                        </div>
                    </div>
                </div>
            </div>
        </main>
    );
}
